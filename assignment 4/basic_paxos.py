# -*- generated by 1.0.12 -*-
import da
PatternExpr_316 = da.pat.TuplePattern([da.pat.ConstantPattern('respond'), da.pat.BoundPattern('_BoundPattern319_'), da.pat.FreePattern(None)])
PatternExpr_323 = da.pat.FreePattern('a')
PatternExpr_351 = da.pat.TuplePattern([da.pat.ConstantPattern('respond'), da.pat.BoundPattern('_BoundPattern354_'), da.pat.TuplePattern([da.pat.FreePattern('n2'), da.pat.FreePattern('v')])])
PatternExpr_382 = da.pat.TuplePattern([da.pat.ConstantPattern('respond'), da.pat.BoundPattern('_BoundPattern385_'), da.pat.TuplePattern([da.pat.FreePattern('n2'), da.pat.FreePattern(None)])])
PatternExpr_418 = da.pat.TuplePattern([da.pat.ConstantPattern('respond'), da.pat.BoundPattern('_BoundPattern421_'), da.pat.FreePattern(None)])
PatternExpr_425 = da.pat.FreePattern('a')
PatternExpr_483 = da.pat.TuplePattern([da.pat.ConstantPattern('done')])
PatternExpr_488 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.FreePattern(None)]), da.pat.TuplePattern([da.pat.ConstantPattern('done')])])
PatternExpr_531 = da.pat.TuplePattern([da.pat.ConstantPattern('prepare'), da.pat.FreePattern('n')])
PatternExpr_538 = da.pat.FreePattern('p')
PatternExpr_544 = da.pat.TuplePattern([da.pat.ConstantPattern('respond'), da.pat.FreePattern('n2'), da.pat.FreePattern(None)])
PatternExpr_573 = da.pat.TuplePattern([da.pat.ConstantPattern('accepted'), da.pat.FreePattern('n'), da.pat.FreePattern('v')])
PatternExpr_599 = da.pat.TuplePattern([da.pat.ConstantPattern('accepted'), da.pat.FreePattern('n'), da.pat.FreePattern(None)])
PatternExpr_635 = da.pat.TuplePattern([da.pat.ConstantPattern('accept'), da.pat.FreePattern('n'), da.pat.FreePattern('v')])
PatternExpr_648 = da.pat.TuplePattern([da.pat.ConstantPattern('respond'), da.pat.FreePattern('n2'), da.pat.FreePattern(None)])
PatternExpr_685 = da.pat.TuplePattern([da.pat.ConstantPattern('done')])
PatternExpr_690 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.FreePattern(None)]), da.pat.TuplePattern([da.pat.ConstantPattern('done')])])
PatternExpr_736 = da.pat.TuplePattern([da.pat.ConstantPattern('accepted'), da.pat.FreePattern('n'), da.pat.FreePattern('v')])
PatternExpr_762 = da.pat.TuplePattern([da.pat.ConstantPattern('accepted'), da.pat.BoundPattern('_BoundPattern765_'), da.pat.BoundPattern('_BoundPattern766_')])
PatternExpr_769 = da.pat.FreePattern('a')
_config_object = {}
import sys
from random import randint
from numpy.random import choice
import copy
import time
TIMEOUT = 1

class Proposer(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._ProposerReceivedEvent_0 = []
        self._ProposerReceivedEvent_1 = []
        self._ProposerReceivedEvent_2 = []
        self._ProposerReceivedEvent_3 = []
        self._ProposerReceivedEvent_4 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_ProposerReceivedEvent_0', PatternExpr_316, sources=[PatternExpr_323], destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ProposerReceivedEvent_1', PatternExpr_351, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ProposerReceivedEvent_2', PatternExpr_382, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ProposerReceivedEvent_3', PatternExpr_418, sources=[PatternExpr_425], destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ProposerReceivedEvent_4', PatternExpr_483, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[])])

    def setup(self, acceptors, monitor, tp, nLossRate, nDelay, nWaitTime, **rest_815):
        super().setup(acceptors=acceptors, monitor=monitor, tp=tp, nLossRate=nLossRate, nDelay=nDelay, nWaitTime=nWaitTime, **rest_815)
        self._state.acceptors = acceptors
        self._state.monitor = monitor
        self._state.tp = tp
        self._state.nLossRate = nLossRate
        self._state.nDelay = nDelay
        self._state.nWaitTime = nWaitTime
        self._state.n = None
        self._state.majority = self._state.acceptors

    def run(self):
        while (not PatternExpr_488.match_iter(self._ProposerReceivedEvent_4, SELF_ID=self._id)):
            self.to_consent()

    def Loss(self):
        modifiedmajority = set()
        majorityList = list(self._state.majority)
        draw = [int(choice((0, 1), 1, p=[self._state.nLossRate, (1 - self._state.nLossRate)], replace=False)) for i in range(len(self._state.majority))]
        for (i, j) in enumerate(draw):
            if (j == 1):
                modifiedmajority.add(majorityList[i])
        return modifiedmajority

    def to_consent(self):
        self._state.n = ((0, self._id) if (self._state.n == None) else ((self._state.n[0] + 1), self._id))
        modifiedmajority = self.Loss()
        delay = randint(0, self._state.nDelay)
        time.sleep(delay)
        self.send(('prepare', self._state.n), to=modifiedmajority)
        super()._label('_st_label_311', block=False)
        _st_label_311 = 0
        self._timer_start()
        while (_st_label_311 == 0):
            _st_label_311 += 1
            if (len({a for (_, (_, _, a), (_ConstantPattern334_, _BoundPattern336_, _)) in self._ProposerReceivedEvent_0 if (_ConstantPattern334_ == 'respond') if (_BoundPattern336_ == self._state.n)}) > (len(self._state.acceptors) / 2)):
                v = self.anyof(({v for (_, _, (_ConstantPattern370_, _BoundPattern372_, (n2, v))) in self._ProposerReceivedEvent_1 if (_ConstantPattern370_ == 'respond') if (_BoundPattern372_ == self._state.n) if (n2 == max({n2 for (_, _, (_ConstantPattern399_, _BoundPattern401_, (n2, _))) in self._ProposerReceivedEvent_2 if (_ConstantPattern399_ == 'respond') if (_BoundPattern401_ == self._state.n)}))} or {randint(1, 100)}))
                responded = {a for (_, (_, _, a), (_ConstantPattern436_, _BoundPattern438_, _)) in self._ProposerReceivedEvent_3 if (_ConstantPattern436_ == 'respond') if (_BoundPattern438_ == self._state.n)}
                self.send(('accept', self._state.n, v), to=responded)
                self.send(('PropsedValue', self._state.n, v), to=self._state.monitor)
                self.debug('### chose', self._state.n, v)
                time.sleep(self._state.nWaitTime)
                _st_label_311 += 1
            elif self._timer_expired:
                self.output('failed proposal number', self._state.n)
                time.sleep(self._state.nWaitTime)
                _st_label_311 += 1
            else:
                super()._label('_st_label_311', block=True, timeout=self._state.tp)
                _st_label_311 -= 1

    def anyof(self, s):
        return (next(iter(s)) if s else None)

class Acceptor(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._AcceptorSentEvent_1 = []
        self._AcceptorSentEvent_2 = []
        self._AcceptorSentEvent_3 = []
        self._AcceptorSentEvent_5 = []
        self._AcceptorReceivedEvent_6 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_AcceptorReceivedEvent_0', PatternExpr_531, sources=[PatternExpr_538], destinations=None, timestamps=None, record_history=None, handlers=[self._Acceptor_handler_530]), da.pat.EventPattern(da.pat.SentEvent, '_AcceptorSentEvent_1', PatternExpr_544, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.SentEvent, '_AcceptorSentEvent_2', PatternExpr_573, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.SentEvent, '_AcceptorSentEvent_3', PatternExpr_599, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_AcceptorReceivedEvent_4', PatternExpr_635, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._Acceptor_handler_634]), da.pat.EventPattern(da.pat.SentEvent, '_AcceptorSentEvent_5', PatternExpr_648, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_AcceptorReceivedEvent_6', PatternExpr_685, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[])])

    def setup(self, learners, monitor, nDelay, **rest_815):
        super().setup(learners=learners, monitor=monitor, nDelay=nDelay, **rest_815)
        self._state.learners = learners
        self._state.monitor = monitor
        self._state.nDelay = nDelay
        pass

    def run(self):
        super()._label('_st_label_682', block=False)
        _st_label_682 = 0
        while (_st_label_682 == 0):
            _st_label_682 += 1
            if PatternExpr_690.match_iter(self._AcceptorReceivedEvent_6, SELF_ID=self._id):
                _st_label_682 += 1
            else:
                super()._label('_st_label_682', block=True)
                _st_label_682 -= 1

    def anyof(self, s):
        "return any element of set s if s is not empty or 'None' otherwise"
        return (next(iter(s)) if s else None)

    def _Acceptor_handler_530(self, n, p):
        n2 = None

        def UniversalOpExpr_542():
            nonlocal n2
            for (_, _, (_ConstantPattern560_, n2, _)) in self._AcceptorSentEvent_1:
                if (_ConstantPattern560_ == 'respond'):
                    if (not (n > n2)):
                        return False
            return True
        if UniversalOpExpr_542():
            maxprop = self.anyof({(n, v) for (_, _, (_ConstantPattern589_, n, v)) in self._AcceptorSentEvent_2 if (_ConstantPattern589_ == 'accepted') if (n == max({n for (_, _, (_ConstantPattern614_, n, _)) in self._AcceptorSentEvent_3 if (_ConstantPattern614_ == 'accepted')}))})
            self.send(('respond', n, maxprop), to=p)
        else:
            pass
    _Acceptor_handler_530._labels = None
    _Acceptor_handler_530._notlabels = None

    def _Acceptor_handler_634(self, n, v):
        n2 = None

        def ExistentialOpExpr_646():
            nonlocal n2
            for (_, _, (_ConstantPattern664_, n2, _)) in self._AcceptorSentEvent_5:
                if (_ConstantPattern664_ == 'respond'):
                    if (n2 > n):
                        return True
            return False
        if (not ExistentialOpExpr_646()):
            self.send(('accepted', n, v), to=self._state.learners)
        else:
            pass
    _Acceptor_handler_634._labels = None
    _Acceptor_handler_634._notlabels = None

class Learner(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._LearnerReceivedEvent_0 = []
        self._LearnerReceivedEvent_1 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_LearnerReceivedEvent_0', PatternExpr_736, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_LearnerReceivedEvent_1', PatternExpr_762, sources=[PatternExpr_769], destinations=None, timestamps=None, record_history=True, handlers=[])])

    def setup(self, acceptors, monitor, tl, **rest_815):
        super().setup(acceptors=acceptors, monitor=monitor, tl=tl, **rest_815)
        self._state.acceptors = acceptors
        self._state.monitor = monitor
        self._state.tl = tl
        pass

    def run(self):
        self.learn()
        self.send(('learned',), to=self.nodeof(self._id))

    def learn(self):
        super()._label('_st_label_733', block=False)
        v = n = a = None

        def ExistentialOpExpr_734():
            nonlocal v, n, a
            for (_, _, (_ConstantPattern753_, n, v)) in self._LearnerReceivedEvent_0:
                if (_ConstantPattern753_ == 'accepted'):
                    if (len({a for (_, (_, _, a), (_ConstantPattern780_, _BoundPattern782_, _BoundPattern783_)) in self._LearnerReceivedEvent_1 if (_ConstantPattern780_ == 'accepted') if (_BoundPattern782_ == n) if (_BoundPattern783_ == v)}) > (len(self._state.acceptors) / 2)):
                        return True
            return False
        _st_label_733 = 0
        self._timer_start()
        while (_st_label_733 == 0):
            _st_label_733 += 1
            if ExistentialOpExpr_734():
                self.output('learned', n, v)
                self.send(('learned', n, v), to=self._state.monitor)
                _st_label_733 += 1
            elif self._timer_expired:
                self.output('failed learning anything')
                _st_label_733 += 1
            else:
                super()._label('_st_label_733', block=True, timeout=self._state.tl)
                _st_label_733 -= 1
